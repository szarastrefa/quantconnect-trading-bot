version: '3.8'

# Production optimizations and monitoring
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    labels: "service,environment"

services:
  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: trading_bot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
    depends_on:
      - api
      - frontend
    networks:
      - trading_network
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=false"

  # Backend Flask API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trading_bot_api
    environment:
      - NODE_ENV=production
      - ENVIRONMENT=production
      - DOMAIN=${DOMAIN:-eqtrader.ddnskita.my.id}
      - DDNS_UPDATE_URL=${DDNS_UPDATE_URL}
      - SSL_ENABLED=${SSL_ENABLED:-true}
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-trading123}@db:5432/trading_bot
      - REDIS_URL=redis://redis:6379/0
      - FLASK_ENV=production
      - FLASK_APP=app.py
    env_file:
      - .env
    volumes:
      - ./lean:/app/lean
      - ./models:/app/models
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      - db
      - redis
    networks:
      - trading_network
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - REACT_APP_API_URL=https://${DOMAIN:-eqtrader.ddnskita.my.id}/api
        - REACT_APP_WS_URL=wss://${DOMAIN:-eqtrader.ddnskita.my.id}/socket.io
    container_name: trading_bot_frontend
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://${DOMAIN:-eqtrader.ddnskita.my.id}/api
      - REACT_APP_WS_URL=wss://${DOMAIN:-eqtrader.ddnskita.my.id}/socket.io
      - REACT_APP_DOMAIN=${DOMAIN:-eqtrader.ddnskita.my.id}
    depends_on:
      - api
    networks:
      - trading_network
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # QuantConnect Lean Engine
  lean_engine:
    image: quantconnect/lean:latest
    container_name: lean_engine
    volumes:
      - ./lean:/Lean
      - ./data:/Data
      - ./algorithms:/Algorithms
      - ./models:/Models
      - ./results:/Results
    environment:
      - environment=live-trading
      - debugging=false
      - QC_USER_ID=${QC_USER_ID:-}
      - QC_API_TOKEN=${QC_API_TOKEN:-}
    env_file:
      - .env
    networks:
      - trading_network
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: trading_bot_db
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-trading_bot}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-trading123}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/migrations:/docker-entrypoint-initdb.d/migrations:ro
    networks:
      - trading_network
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-trading_bot}"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    command: >
      postgres 
      -c max_connections=200
      -c shared_buffers=128MB
      -c effective_cache_size=256MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: trading_bot_redis
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD:-redis123}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - trading_network
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.05'

  # DDNS Updater Service
  ddns_updater:
    build:
      context: ./services/ddns
      dockerfile: Dockerfile
    container_name: ddns_updater
    environment:
      - DDNS_UPDATE_URL=${DDNS_UPDATE_URL}
      - DOMAIN=${DOMAIN:-eqtrader.ddnskita.my.id}
      - UPDATE_INTERVAL=${DDNS_UPDATE_INTERVAL:-300}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    restart: unless-stopped
    networks:
      - trading_network
    logging: *default-logging
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('https://ifconfig.me', timeout=5)"]
      interval: 300s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 16M
          cpus: '0.01'

  # System Monitor and Health Checker
  monitor:
    build:
      context: ./services/monitor
      dockerfile: Dockerfile
    container_name: system_monitor
    environment:
      - DOMAIN=${DOMAIN:-eqtrader.ddnskita.my.id}
      - CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-60}
      - ALERT_EMAIL=${ALERT_EMAIL:-}
      - SLACK_WEBHOOK=${SLACK_WEBHOOK:-}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs:/app/logs
    depends_on:
      - api
      - frontend
      - db
      - redis
    networks:
      - trading_network
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.01'

  # Log Aggregator (Optional)
  logrotate:
    image: alpine:latest
    container_name: log_rotator
    volumes:
      - ./logs:/logs
      - ./scripts/logrotate.conf:/etc/logrotate.d/trading-bot:ro
    command: >
      sh -c '
        while true; do
          find /logs -name "*.log" -size +100M -exec truncate -s 50M {} \;
          find /logs -name "*.log.*" -mtime +7 -delete
          sleep 3600
        done
      '
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 32M
          cpus: '0.05'
        reservations:
          memory: 8M
          cpus: '0.001'

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis

networks:
  trading_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: trading-net
      com.docker.network.driver.mtu: 1500