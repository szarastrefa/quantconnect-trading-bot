version: '3.8'

# Production optimizations and monitoring
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    labels: "service,environment"

services:
  # Backend Flask API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trading_bot_api
    environment:
      - NODE_ENV=production
      - ENVIRONMENT=production
      - DOMAIN=${DOMAIN:-localhost}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-trading123}@db:5432/${POSTGRES_DB:-trading_bot}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - FLASK_ENV=production
      - FLASK_APP=app.py
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - trading_network
    restart: unless-stopped
    logging: *default-logging
    ports:
      - "5000:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - REACT_APP_API_URL=${BACKEND_URL:-http://localhost:5000}/api
        - REACT_APP_WS_URL=${WEBSOCKET_URL:-ws://localhost:5000}/socket.io
    container_name: trading_bot_frontend
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${BACKEND_URL:-http://localhost:5000}/api
      - REACT_APP_WS_URL=${WEBSOCKET_URL:-ws://localhost:5000}/socket.io
      - REACT_APP_DOMAIN=${DOMAIN:-localhost}
    depends_on:
      - api
    networks:
      - trading_network
    restart: unless-stopped
    logging: *default-logging
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # QuantConnect Lean Engine
  lean_engine:
    image: quantconnect/lean:latest
    container_name: lean_engine
    volumes:
      - ./data:/Data
      - ./algorithms:/Algorithms
      - ./results:/Results
    environment:
      - environment=live-trading
      - debugging=false
      - QC_USER_ID=${QC_USER_ID:-}
      - QC_API_TOKEN=${QC_API_TOKEN:-}
    env_file:
      - .env
    networks:
      - trading_network
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: trading_bot_db
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-trading_bot}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-trading123}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - trading_network
    restart: unless-stopped
    logging: *default-logging
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-trading_bot}"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: trading_bot_redis
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD:-redis123}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - trading_network
    restart: unless-stopped
    logging: *default-logging
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.05'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  trading_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1