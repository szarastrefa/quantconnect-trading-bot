version: '3.8'

services:
  # Backend Flask API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trading_bot_api
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_APP=app.py
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-trading123}@db:5432/trading_bot
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
    volumes:
      - ./lean:/app/lean
      - ./models:/app/models
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
      - lean_engine
    networks:
      - trading_network
    restart: unless-stopped

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: trading_bot_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_WS_URL=ws://localhost:5000
    depends_on:
      - api
    networks:
      - trading_network
    restart: unless-stopped

  # QuantConnect Lean Engine
  lean_engine:
    image: quantconnect/lean:latest
    container_name: lean_engine
    volumes:
      - ./lean:/Lean
      - ./data:/Data
      - ./algorithms:/Algorithms
      - ./models:/Models
    environment:
      - environment=live-trading
      - debugging=false
      - QC_USER_ID=${QC_USER_ID:-}
      - QC_API_TOKEN=${QC_API_TOKEN:-}
    networks:
      - trading_network
    restart: unless-stopped

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: trading_bot_db
    environment:
      - POSTGRES_DB=trading_bot
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-trading123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - trading_network
    restart: unless-stopped

  # Redis for caching and messaging
  redis:
    image: redis:7-alpine
    container_name: trading_bot_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx for reverse proxy
  nginx:
    image: nginx:alpine
    container_name: trading_bot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - frontend
    networks:
      - trading_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  trading_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16