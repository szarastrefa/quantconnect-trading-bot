# QuantConnect Trading Bot - Production Nginx Configuration
# Domain: eqtrader.ddnskita.my.id
# SSL-enabled with HTTP to HTTPS redirect

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=general:10m rate=30r/s;

# Upstream servers
upstream backend_api {
    least_conn;
    server api:5000 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream frontend_app {
    least_conn;
    server frontend:3000 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

# Security headers map
map $sent_http_content_type $content_type_csp {
    ~text/html "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://unpkg.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' wss: https:; frame-ancestors 'none';";
    default "default-src 'self';";
}

# HTTP to HTTPS redirect server
server {
    listen 80;
    listen [::]:80;
    server_name eqtrader.ddnskita.my.id www.eqtrader.ddnskita.my.id;
    
    # Security headers for HTTP
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # ACME challenge for SSL certificate renewal
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
        allow all;
        try_files $uri =404;
    }
    
    # Health check endpoint (no redirect)
    location = /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # API health check (no redirect)
    location = /api/health {
        proxy_pass http://backend_api/api/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Redirect all other HTTP traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# Main HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name eqtrader.ddnskita.my.id www.eqtrader.ddnskita.my.id;
    
    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/eqtrader.ddnskita.my.id/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/eqtrader.ddnskita.my.id/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/eqtrader.ddnskita.my.id/chain.pem;
    
    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # HSTS (31536000 seconds = 1 year)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Security Headers
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy $content_type_csp always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # Hide server tokens
    server_tokens off;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Browser caching
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|woff|woff2|ttf|eot|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }
    
    # API endpoints
    location /api/ {
        # Rate limiting
        limit_req zone=api burst=20 nodelay;
        limit_req_status 429;
        
        # Remove trailing slash and proxy to backend
        rewrite ^/api/(.*) /$1 break;
        proxy_pass http://backend_api;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffering
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # Error handling
        proxy_next_upstream error timeout http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        
        # Add API response headers
        add_header X-API-Version "1.0" always;
        add_header X-Response-Time $upstream_response_time always;
    }
    
    # Authentication endpoints with stricter rate limiting
    location ~ ^/api/(auth|login|register)/ {
        limit_req zone=login burst=5 nodelay;
        limit_req_status 429;
        
        rewrite ^/api/(.*) /$1 break;
        proxy_pass http://backend_api;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # WebSocket endpoints
    location /socket.io/ {
        proxy_pass http://backend_api/socket.io/;
        
        # WebSocket upgrade headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Standard headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket specific timeouts
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;
        
        # Disable buffering for real-time data
        proxy_buffering off;
        proxy_cache off;
    }
    
    # Health check endpoint
    location = /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    # Detailed health check
    location = /status {
        access_log off;
        
        # Check backend health
        proxy_pass http://backend_api/api/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        
        # Quick timeout for health checks
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
        
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    # Admin interface (if needed)
    location /admin/ {
        # Restrict to specific IPs if needed
        # allow 10.0.0.0/8;
        # allow 172.16.0.0/12;
        # allow 192.168.0.0/16;
        # deny all;
        
        limit_req zone=general burst=10 nodelay;
        
        proxy_pass http://backend_api/admin/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Documentation
    location /docs/ {
        limit_req zone=general burst=10 nodelay;
        
        proxy_pass http://backend_api/docs/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Static files (if served directly by nginx)
    location /static/ {
        alias /var/www/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
        
        # Handle CORS for static assets
        add_header Access-Control-Allow-Origin "https://eqtrader.ddnskita.my.id";
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept";
    }
    
    # Favicon
    location = /favicon.ico {
        alias /var/www/static/favicon.ico;
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
        log_not_found off;
    }
    
    # Robots.txt
    location = /robots.txt {
        alias /var/www/static/robots.txt;
        expires 1d;
        access_log off;
        log_not_found off;
    }
    
    # Block access to sensitive files
    location ~ /\.(git|env|htaccess|htpasswd) {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Block access to backup files
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Frontend React application (catch-all)
    location / {
        limit_req zone=general burst=30 nodelay;
        
        # Try to serve static files first, then proxy to React
        try_files $uri @frontend;
    }
    
    # Frontend proxy
    location @frontend {
        proxy_pass http://frontend_app;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        
        # For React Router (SPA)
        proxy_intercept_errors on;
        error_page 404 = @frontend_fallback;
    }
    
    # Fallback for React Router
    location @frontend_fallback {
        proxy_pass http://frontend_app/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        internal;
        return 404 '{"error": "Not Found", "status": 404}';
        add_header Content-Type application/json;
    }
    
    location = /50x.html {
        internal;
        return 500 '{"error": "Internal Server Error", "status": 500}';
        add_header Content-Type application/json;
    }
    
    # Logging
    access_log /var/log/nginx/trading_bot_access.log combined buffer=16k flush=5m;
    error_log /var/log/nginx/trading_bot_error.log warn;
}

# Additional security server block for unknown hosts
server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    server_name _;
    
    # Use same SSL certificates
    ssl_certificate /etc/letsencrypt/live/eqtrader.ddnskita.my.id/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/eqtrader.ddnskita.my.id/privkey.pem;
    
    # Return 444 (connection closed without response) for unknown hosts
    return 444;
}